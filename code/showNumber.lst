     1                                          ;在屏幕上显示65535
     2                                  start:
     3                                          ;mov ax, 65535
     4                                          ;mov bl, 10
     5                                          ;div bl;AX => 商(6553) DX => 余数(5)
     6 00000000 B8FFFF                          mov ax, 65535
     7 00000003 31D2                            xor dx, dx
     8 00000005 BB0A00                          mov bx, 10
     9 00000008 F7F3                            div bx
    10                                  
    11 0000000A 80C230                          add dl, 0x30 ; 将数字转换为对应的数字字符
    12                                  
    13 0000000D B90000                          mov cx,0
    14 00000010 8ED9                            mov ds, cx   ; 将cx中的段地址，存入数据段寄存器ds
    15                                  
    16 00000012 8816[8A7C]                      mov [0x7c00+buffer],dl
    17                                  
    18 00000016 31D2                            xor dx,dx    ; 清零
    19 00000018 F7F3                            div bx
    20 0000001A 80C230                          add dl,0x30
    21 0000001D 8816[8B7C]                      mov [0x7c00+buffer+1],dl ; 运行时的偏移地址需要加1访问下一个地址
    22                                  
    23 00000021 31D2                            xor dx,dx    ; 清零
    24 00000023 F7F3                            div bx
    25 00000025 80C230                          add dl,0x30
    26 00000028 8816[8C7C]                      mov [0x7c00+buffer+2],dl ; 运行时的偏移地址需要加1访问下一个地址
    27                                  
    28                                  
    29 0000002C 31D2                            xor dx,dx    ; 清零
    30 0000002E F7F3                            div bx
    31 00000030 80C230                          add dl,0x30
    32 00000033 8816[8D7C]                      mov [0x7c00+buffer+3],dl ; 运行时的偏移地址需要加1访问下一个地址
    33                                  
    34                                  
    35 00000037 31D2                            xor dx,dx    ; 清零
    36 00000039 F7F3                            div bx
    37 0000003B 80C230                          add dl,0x30
    38 0000003E 8816[8E7C]                      mov [0x7c00+buffer+4],dl ; 运行时的偏移地址需要加1访问下一个地址
    39                                  
    40                                          ;两个段之间进行操作
    41                                          ;mov al,[0x7c00+buffer+4]
    42                                  
    43                                          ;mov cx, 0xb800 ;使用通用寄存器中转，然后存在段寄存器地址中
    44                                          ;mov ds, cx
    45                                  
    46                                          ;mov [0x00], al ; 将寄存器al的值，放到段内偏移地址0x00处
    47                                          ;mov byte [0x01], 0x2f ; 写入颜色属性  由于立即数可大可小，内存地址也看不出大小，所以要指明
    48                                  
    49                                          ;mov cx, 0      ; 切到段地址0处
    50                                          ;mov ds, cx     ; 切到段地址0处
    51                                  
    52                                          ;mov al, [0x7c00+buffer+3]  ; 将段内偏移地址的值放到通用寄存器al中
    53                                  
    54                                          ;mov cx, 0xb800 ;使用通用寄存器中转，然后存在段寄存器地址中
    55                                          ;mov ds, cx
    56                                  
    57                                          ;mov [0x02], al ; 将寄存器al的值，放到段内偏移地址0x00处
    58                                          ;mov byte [0x03], 0x2f ; 写入颜色属性  由于立即数可大可小，内存地址也看不出大小，所以要指明
    59                                  
    60                                          ; 两个段之间进行操作，切来切去，确实麻烦
    61                                  
    62                                          ; 全新版本，使用es段地址寄存器
    63                                  
    64 00000042 B900B8                          mov cx, 0xb800
    65 00000045 8EC1                            mov es, cx
    66                                  
    67 00000047 A0[8E7C]                        mov al, [0x7c00+buffer+4]
    68 0000004A 26A20000                        mov [es:0x00], al       ;[es: => 段超越前缀] 使用es段寄存器，来填充显存
    69 0000004E 26C60601002F                    mov byte [es:0x01], 0x2f
    70                                  
    71 00000054 A0[8D7C]                        mov al, [0x7c00+buffer+3]
    72 00000057 26A20200                        mov [es:0x02], al       ; 使用es段寄存器，来填充显存
    73 0000005B 26C60603002F                    mov byte [es:0x03], 0x2f
    74                                  
    75 00000061 A0[8C7C]                        mov al, [0x7c00+buffer+2]
    76 00000064 26A20400                        mov [es:0x04], al       ; 使用es段寄存器，来填充显存
    77 00000068 26C60605002F                    mov byte [es:0x05], 0x2f
    78                                  
    79 0000006E A0[8B7C]                        mov al, [0x7c00+buffer+1]
    80 00000071 26A20600                        mov [es:0x06], al       ; 使用es段寄存器，来填充显存
    81 00000075 26C60607002F                    mov byte [es:0x07], 0x2f
    82                                  
    83 0000007B A0[8A7C]                        mov al, [0x7c00+buffer]
    84 0000007E 26A20800                        mov [es:0x08], al       ; 使用es段寄存器，来填充显存
    85 00000082 26C60609002F                    mov byte [es:0x09], 0x2f
    86                                  
    87                                  again:
    88 00000088 EBFE                            jmp again
    89                                  
    90 0000008A 0000000000              buffer        db 0,0,0,0,0 ;使用位指令db开辟 5个字节空间 每个数字都是一个字节
    91                                  
    92                                  
    93                                  current:
    94 0000008F 00<rep 16Fh>                    times 510 - (current - start) db 0
    95 000001FE 55AA                            db 0x55, 0xAA
