     1                                  start:
     2 00000000 B800B8                  		mov ax, 0xb800 ;把0xb800传给通用寄存器ax 这句指令中，目的操作数：ax寄存器长度是16位的 ，源操作数：0xb800也是16位的长度 所以这条指令按照16位长度进行，不存起歧义
     3                                  
     4                                  		;目的操作数：ds寄存器长度是16位的 ，源操作数：ax寄存器也是16位的长度 所以这条指令按照16位长度进行，不存起歧义
     5 00000003 8ED8                    		mov ds, ax     ;把通用寄存器ax的内容传送给ds数据段寄存器，英特尔处理器，不允许，将一个立即数，存到段寄存器，只能用通用寄存器中转
     6                                  		;因为有立即数，为了访问内存单元，需要给出段地址和偏移地址
     7                                  
     8                                  		;操作数部分0x41可以理解为一个字节也可以理解为一个字（两个字节）
     9                                  		;内存操作数部分，只是制定一个起始的偏移地址，没有其他信息，起始地址可以使一个字节，也可以是一个字的起始地址
    10                                  		;两个操作数的长度都很模糊，mov指令无法确定是以字节进行或者以字（两个字节）进行，所以必须使用byte来修饰目的操作数
    11                                  		;指出，[0x00]是一个字节单元的操作地址，本次传送是以字节的方式进行，
    12                                  		;一旦目的操作数，被指明是字节（byte），那么源操作数0x41，理所应当是一个byte（字节）长
    13 00000005 C606000041              		mov byte [0x00],byte 0x41      ;字符A的ASCII编码     偏移地址0x00，段地址如果没有其他任何指示，在ds段寄存器中0xb800
    14 0000000A C60601000C              		mov byte [0x01], 0x0c      ;黑底红字，无闪烁
    15                                  
    16 0000000F C606020073              		mov byte [0x02], 's'       ;等同于 mov byte [0x02], 0x73 其中's'是字符的字面值
    17 00000014 C606030004              		mov byte [0x03], 0x04
    18                                  
    19 00000019 C606040073              		mov byte [0x04], 's'
    20 0000001E C606050004              		mov byte [0x05], 0x04
    21                                  
    22 00000023 C606060065              		mov byte [0x06], 'e'
    23 00000028 C606070004              		mov byte [0x07], 0x04
    24                                  
    25 0000002D C60608006D              		mov byte [0x08], 'm'
    26 00000032 C606090004              		mov byte [0x09], 0x04
    27                                  
    28 00000037 C6060A0062              		mov byte [0x0a], 'b'
    29 0000003C C6060B0004              		mov byte [0x0b], 0x04
    30                                  dest:
    31 00000041 C6060C006C              		mov byte [0x0c], 'l'
    32 00000046 C6060D0004              		mov byte [0x0d], 0x04
    33                                  
    34 0000004B C6060E0079              		mov byte [0x0e], 'y'
    35 00000050 C6060F0004              		mov byte [0x0f], 0x04
    36                                  
    37 00000055 C60610002E              		mov byte [0x10], '.'
    38 0000005A C606110004              		mov byte [0x11], 0x04
    39                                  
    40                                  		;mov [0xb8012], 'h'     ;编译失败，这里[]只能使用偏移量
    41                                  		;mov [0xb8013], 0x04
    42                                  
    43                                  		;mov byte [0x12], 'h'
    44                                  		;mov byte [0x13], 0x04
    45                                  again:
    46 0000005F E9FDFF                  		jmp near again	;标号的汇编地址-jum之后的汇编地址，
    47                                  		;相对短跳转：等同于: jum short start 如果大小在[-127,128]之间，编译后机器指令是2个字节，第一个字节是操作码EB第二个字节是8位的相对偏移量：EB 8位偏移量
    48                                  		;相对近跳转：等同于: jum near start 如果大小不在[-127,128]之间，编译后机器指令是3个字节，第一个字节是操作码E9第二个字节是16位的相对偏移量：E9 16位偏移量
    49                                  current:
    50 00000062 00<rep 19Ch>            		times 510 - (current - start) db 0
    51                                  
    52 000001FE 55AA                    		db 0x55, 0xAA
